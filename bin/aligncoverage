#!/usr/bin/env python

# Given 454 Project directory path
# Spit out all low coverage bases for the refrence listed highest in 454RefStatus
import os
import os.path
import sys
from argparse import ArgumentParser

from coverage.coverage import AlignmentCoverage

def output_normal( ref, reflen, regions ):
    print "Reference(Length:{}) {} has the following low coverage regions:".format(reflen,ref)
    for region in regions:
        print "\t{}".format(region)

def output_csv( ref, reflen, regions ):
    print "{}|{},{}".format(ref, reflen, ','.join( [str(region) for region in regions] ))

def output( ops ):
    ac = AlignmentCoverage( ops.dir, 10 )
    for ref, reflen, regions in ac.find_low_coverage():
        # Skip regions with no low coverage or gaps
        if not regions:
            continue
        if ops.csv:
            output_csv( ref, reflen, regions )
        else:
            output_normal( ref, reflen, regions )

def main( ops ):
    output( ops )

def getops( ):
    parser = ArgumentParser()

    parser.add_argument( '-d', '--dir', dest='dir', required=True, help='454 Project directory path to find gaps in' )
    parser.add_argument( '-c', '--csv', dest='csv', default=False, action='store_true', help='Output in csv format' )
    #parser.add_argument( '-lc', '--low-coverage', dest='lc', default=10, help='What is considered low coverage[Default: 10 reads]' )

    ops = parser.parse_args()
    
    return ops
    
if __name__ == '__main__':
    ops = getops()
    main( ops )
